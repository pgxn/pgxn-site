%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.3.1 (Build 23D60) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 602 148
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 602 148
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1036276 0.099162303 0.097511701 sc
q
17 135.088 m
17 115.212 l
56.172001 115.212 l
61.540001 115.212 64.005997 116.228 64.005997 121.16 c
64.005997 129.14 l
64.005997 134.07201 61.540001 135.088 56.172001 135.088 c
17 135.088 l
h
-0.12 148 m
64.005997 148 l
75.466003 148 80.835999 143.938 80.835999 133.492 c
80.835999 116.808 l
80.835999 106.362 75.466003 102.302 64.005997 102.302 c
17 102.302 l
17 73.139999 l
-0.12 73.139999 l
-0.12 148 l
-0.12 148 l
h
W*
0 73.139999 80.835999 74.860001 rc
-2 150 m
82.835999 150 l
82.835999 71.139999 l
-2 71.139999 l
h
f
Q
q
123.482 134.65199 m
123.482 87.211998 l
177.886 87.211998 l
177.886 103.898 l
149.45 103.898 l
149.45 116.664 l
194.86 116.664 l
194.86 90.837997 l
194.86 76.765999 190.362 73.139999 176.28999 73.139999 c
124.642 73.139999 l
110.57 73.139999 106.072 76.765999 106.072 90.837997 c
106.072 130.302 l
106.072 144.37399 110.57 148 124.642 148 c
176.28999 148 l
189.92799 148 194.86 144.52 194.86 131.026 c
194.86 130.446 194.86 129.866 194.86 129.286 c
177.886 126.238 l
177.886 134.65199 l
123.482 134.65199 l
W*
0 0 602 148 rc
104.072 150 m
196.86 150 l
196.86 71.139999 l
104.072 71.139999 l
h
f
Q
q
255.786 111.586 m
219.662 148 l
242.73 148 l
266.668 122.612 l
289.444 148 l
309.46399 148 l
276.82401 113.616 l
317.15399 73.139999 l
293.50601 73.139999 l
266.08801 102.154 l
240.842 73.139999 l
220.242 73.139999 l
255.786 111.586 l
W*
0 0 602 148 rc
217.662 150 m
319.15399 150 l
319.15399 71.139999 l
217.662 71.139999 l
h
f
Q
q
335.71399 148 m
347.612 148 l
400.276 103.898 l
403.32199 101.43 406.224 98.82 408.836 95.772003 c
408.39999 102.01 408.10999 106.362 408.10999 108.684 c
408.10999 148 l
423.78 148 l
423.78 73.139999 l
411.88 73.139999 l
356.896 119.42 l
354.72 121.306 352.69 123.192 350.65799 125.514 c
351.23801 119.71 351.38199 115.792 351.38199 113.616 c
351.38199 73.139999 l
335.71399 73.139999 l
335.71399 148 l
W*
0 0 602 148 rc
333.71399 150 m
425.78 150 l
425.78 71.139999 l
333.71399 71.139999 l
h
f
Q
q
109.476 31.186001 m
110.056 31.072001 110.636 31.011999 111.564 31.011999 c
116.264 31.011999 119.978 33.972 119.978 40.644001 c
119.978 45.051998 118.178 49.169998 112.32 49.169998 c
111.1 49.169998 110.172 49.056 109.476 48.880001 c
109.476 31.186001 l
h
106.982 50.563999 m
108.548 51.026001 110.172 51.318001 112.55 51.318001 c
115.568 51.318001 118.294 50.330002 119.978 48.532001 c
121.6 46.792 122.588 44.181999 122.588 40.700001 c
122.588 37.509998 121.948 35.48 120.788 33.624001 c
118.818 30.49 115.394 28.865999 111.74 28.865999 c
110.81 28.865999 110.172 28.865999 109.476 28.982 c
109.476 12.042 l
106.982 12.042 l
106.982 50.563999 l
106.982 50.563999 l
h
W*
0 0 602 148 rc
104.982 53.318001 m
124.588 53.318001 l
124.588 10.042 l
104.982 10.042 l
h
f
Q
q
133.256 13.782 m
137.95599 13.782 138.828 21.440001 138.828 25.966 c
138.828 30.49 137.95599 38.147999 133.142 38.147999 c
128.442 38.147999 127.574 30.49 127.574 25.966 c
127.574 21.440001 128.442 13.782 133.2 13.782 c
133.256 13.782 l
h
133.084 11.576 m
129.14 11.576 125.02 15.696 125.02 25.966 c
125.02 36.234001 129.14 40.352001 133.49001 40.352001 c
137.43401 40.352001 141.496 36.234001 141.496 25.966 c
141.496 15.696 137.37601 11.576 133.142 11.576 c
133.084 11.576 l
133.084 11.576 l
h
W*
0 0 602 148 rc
123.02 42.352001 m
143.496 42.352001 l
143.496 9.5760002 l
123.02 9.5760002 l
h
f
Q
q
145.85001 15.348 m
146.778 14.71 148.28799 13.896 150.028 13.896 c
152.92799 13.896 154.842 15.87 154.842 18.945999 c
154.842 21.440001 154.088 23.296 151.07201 25.441999 c
147.998 27.648001 145.444 29.736 145.444 33.332001 c
145.444 37.568001 148.694 40.352001 152.23199 40.352001 c
154.32201 40.352001 155.83 39.540001 156.756 38.844002 c
155.65601 36.813999 l
154.61 37.625999 153.508 38.147999 152.058 38.147999 c
149.39 38.147999 147.938 36 147.938 33.854 c
147.938 31.591999 148.694 30.316 151.536 28.228001 c
154.20399 26.313999 157.396 23.992001 157.396 19.642 c
157.396 14.13 153.742 11.694 149.912 11.694 c
148.056 11.694 146.084 12.332 144.922 13.318 c
145.85001 15.348 l
W*
0 0 602 148 rc
142.922 42.352001 m
159.396 42.352001 l
159.396 9.6940002 l
142.922 9.6940002 l
h
f
Q
q
165.812 45.98 m
165.812 39.889999 l
171.09 39.889999 l
171.09 37.740002 l
165.812 37.740002 l
165.812 18.771999 l
165.812 14.884 167.088 13.84 168.76801 13.84 c
169.466 13.84 170.04601 13.896 170.452 14.014 c
170.742 12.1 l
170.104 11.81 169.408 11.694 168.248 11.694 c
166.74001 11.694 165.40601 12.156 164.534 13.318 c
163.666 14.48 163.31599 16.16 163.31599 19.700001 c
163.31599 37.740002 l
159.834 37.740002 l
159.834 39.889999 l
163.31599 39.889999 l
163.31599 44.529999 l
165.812 45.98 l
W*
0 0 602 148 rc
157.834 47.98 m
173.09 47.98 l
173.09 9.6940002 l
157.834 9.6940002 l
h
f
Q
q
187.054 30.664 m
187.054 31.360001 187.054 32.057999 186.88 32.694 c
186.3 35.014 185.14 38.147999 181.834 38.147999 c
178.29401 38.147999 176.14799 33.391998 176.14799 26.198 c
176.14799 17.841999 178.87399 14.246 181.892 14.246 c
183.51601 14.246 185.72 14.942 186.82401 19.468 c
187.054 20.511999 187.054 21.382 187.054 22.194 c
187.054 30.664 l
h
189.55 15.928 m
189.55 7.7480001 188.73801 5.2540002 187.172 3.3399999 c
185.72 1.484 183.284 0.43799999 180.78799 0.43799999 c
178.526 0.43799999 176.32201 1.076 175.162 1.83 c
175.974 3.9200001 l
176.90199 3.3959999 178.81799 2.6440001 181.08 2.6440001 c
184.444 2.6440001 187.054 4.6739998 187.054 12.274 c
187.054 15.812 l
186.938 15.812 l
186.00999 13.376 183.92 12.042 181.42599 12.042 c
177.308 12.042 173.53799 16.799999 173.53799 25.966 c
173.53799 36.872002 178.468 40.352001 181.95 40.352001 c
185.37199 40.352001 186.474 37.916 187.172 36.580002 c
187.286 36.580002 l
187.40401 39.889999 l
189.78 39.889999 l
189.724 38.380001 189.55 36.174 189.55 31.302 c
189.55 15.928 l
189.55 15.928 l
h
W*
0 0 602 148 rc
171.53799 42.352001 m
191.78 42.352001 l
191.78 -1.562 l
171.53799 -1.562 l
h
f
Q
q
196.284 33.448002 m
196.284 35.537998 196.11 38.147999 196.052 39.889999 c
198.42999 39.889999 l
198.54601 35.363998 l
198.664 35.363998 l
199.358 37.799999 201.79601 40.352001 204.696 40.352001 c
204.87 40.352001 205.04401 40.352001 205.218 40.352001 c
205.218 37.625999 l
205.10201 37.625999 204.92799 37.625999 204.754 37.625999 c
201.158 37.625999 199.07001 34.085999 198.838 30.664 c
198.778 29.851999 198.778 29.098 198.778 28.285999 c
198.778 12.042 l
196.284 12.042 l
196.284 33.448002 l
W*
0 0 602 148 rc
194.052 42.352001 m
207.218 42.352001 l
207.218 10.042 l
194.052 10.042 l
h
f
Q
q
219.98 29.040001 m
220.09399 35.886002 217.254 38.147999 215.222 38.147999 c
211.974 38.147999 210.23399 33.506001 209.942 29.040001 c
219.98 29.040001 l
h
209.886 27.007999 m
209.886 15.812 213.772 13.896 216.90601 13.896 c
218.702 13.896 220.15401 14.362 221.082 15 c
221.662 13.086 l
220.328 12.156 218.29601 11.694 216.44 11.694 c
210.34801 11.694 207.334 17.436001 207.334 25.848 c
207.334 34.666 210.522 40.352001 215.62801 40.352001 c
221.14 40.352001 222.64799 33.566002 222.64799 28.634001 c
222.64799 28.112 222.64799 27.587999 222.64799 27.007999 c
209.886 27.007999 l
209.886 27.007999 l
h
W*
0 0 602 148 rc
205.334 42.352001 m
224.64799 42.352001 l
224.64799 9.6940002 l
205.334 9.6940002 l
h
f
Q
q
227.002 15.58 m
228.162 14.768 230.308 13.956 232.106 13.956 c
236.51601 13.956 239.358 17.148001 239.358 21.962 c
239.358 26.08 237.03799 28.747999 234.138 31.186001 c
232.45399 32.638 226.77 36 226.77 41.978001 c
226.77 47.661999 230.888 51.490002 235.87801 51.490002 c
238.198 51.490002 240.112 50.678001 240.924 50.042 c
239.938 47.896 l
239.00999 48.59 237.386 49.23 235.472 49.23 c
231.29401 49.23 229.32201 45.748001 229.32201 42.672001 c
229.32201 37.858002 231.87399 36.118 235.298 33.448002 c
239.70599 29.968 241.912 26.601999 241.912 22.136 c
241.912 15.64 237.504 11.694 232.166 11.694 c
229.786 11.694 227.118 12.622 226.132 13.492 c
227.002 15.58 l
W*
0 0 602 148 rc
224.132 53.490002 m
243.912 53.490002 l
243.912 9.6940002 l
224.132 9.6940002 l
h
f
Q
q
256.53601 13.84 m
262.57001 13.84 263.96201 24.052 263.96201 31.591999 c
263.96201 39.133999 262.45401 49.344002 256.478 49.344002 c
250.27 49.344002 248.76199 39.133999 248.76199 31.591999 c
248.76199 24.052 250.27 13.84 256.478 13.84 c
256.53601 13.84 l
h
265.93399 7.4580002 m
263.14999 8.5620003 259.14801 10.36 257.582 11.114 c
257.00201 11.404 256.59399 11.576 256.362 11.576 c
250.618 11.576 246.15199 17.436001 246.15199 31.591999 c
246.15199 46.212002 251.084 51.608002 256.828 51.608002 c
261.75601 51.608002 266.57401 46.212002 266.57401 31.591999 c
266.57401 20.337999 263.84601 14.536 259.436 12.622 c
259.436 12.448 l
262.10599 11.288 264.77399 10.416 266.922 9.7220001 c
265.93399 7.4580002 l
265.93399 7.4580002 l
h
W*
0 0 602 148 rc
244.15199 53.608002 m
268.922 53.608002 l
268.922 5.4580002 l
244.15199 5.4580002 l
h
f
Q
q
272.26401 51.144001 m
274.758 51.144001 l
274.758 14.188 l
286.35999 14.188 l
286.35999 12.042 l
272.26401 12.042 l
272.26401 51.144001 l
W*
0 0 602 148 rc
270.26401 53.144001 m
288.35999 53.144001 l
288.35999 10.042 l
270.26401 10.042 l
h
f
Q
q
312.76199 31.478001 m
302.436 31.478001 l
302.436 14.246 l
314.26999 14.246 l
314.26999 12.042 l
299.94199 12.042 l
299.94199 51.144001 l
313.51599 51.144001 l
313.51599 48.938 l
302.436 48.938 l
302.436 33.68 l
312.76199 33.68 l
312.76199 31.478001 l
W*
0 0 602 148 rc
297.94199 53.144001 m
316.26999 53.144001 l
316.26999 10.042 l
297.94199 10.042 l
h
f
Q
q
319.20801 39.889999 m
322.34 33.332001 l
323.09399 31.766001 323.73199 30.200001 324.48599 28.344 c
324.60199 28.344 l
325.35599 30.316 326.168 31.882 326.806 33.332001 c
329.82199 39.889999 l
332.548 39.889999 l
325.70401 26.198 l
332.37601 12.042 l
329.64801 12.042 l
326.51599 19.002001 l
325.82001 20.511999 325.23999 21.962 324.37 24.108 c
324.254 24.108 l
323.556 22.252001 322.802 20.686001 322.048 19.002001 c
318.91599 12.042 l
316.24799 12.042 l
323.15201 26.139999 l
316.53799 39.889999 l
319.20801 39.889999 l
W*
0 0 602 148 rc
314.24799 41.889999 m
334.548 41.889999 l
334.548 10.042 l
314.24799 10.042 l
h
f
Q
q
340.616 45.98 m
340.616 39.889999 l
345.89401 39.889999 l
345.89401 37.740002 l
340.616 37.740002 l
340.616 18.771999 l
340.616 14.884 341.89001 13.84 343.57199 13.84 c
344.26999 13.84 344.85001 13.896 345.25601 14.014 c
345.54599 12.1 l
344.90799 11.81 344.21201 11.694 343.04999 11.694 c
341.54401 11.694 340.20999 12.156 339.33801 13.318 c
338.46799 14.48 338.12 16.16 338.12 19.700001 c
338.12 37.740002 l
334.638 37.740002 l
334.638 39.889999 l
338.12 39.889999 l
338.12 44.529999 l
340.616 45.98 l
W*
0 0 602 148 rc
332.638 47.98 m
347.89401 47.98 l
347.89401 9.6940002 l
332.638 9.6940002 l
h
f
Q
q
360.98801 29.040001 m
361.104 35.886002 358.26199 38.147999 356.23001 38.147999 c
352.98199 38.147999 351.242 33.506001 350.952 29.040001 c
360.98801 29.040001 l
h
350.89401 27.007999 m
350.89401 15.812 354.78201 13.896 357.914 13.896 c
359.71201 13.896 361.16199 14.362 362.09 15 c
362.67001 13.086 l
361.336 12.156 359.306 11.694 357.45001 11.694 c
351.358 11.694 348.34201 17.436001 348.34201 25.848 c
348.34201 34.666 351.53201 40.352001 356.63599 40.352001 c
362.14801 40.352001 363.65601 33.566002 363.65601 28.634001 c
363.65601 28.112 363.65601 27.587999 363.65601 27.007999 c
350.89401 27.007999 l
350.89401 27.007999 l
h
W*
0 0 602 148 rc
346.34201 42.352001 m
365.65601 42.352001 l
365.65601 9.6940002 l
346.34201 9.6940002 l
h
f
Q
q
368.76401 33.448002 m
368.76401 36.872002 368.59 37.916 368.534 39.889999 c
370.79599 39.889999 l
370.91199 36.466 l
371.02802 36.466 l
372.07199 38.728001 374.21799 40.352001 377.17599 40.352001 c
380.134 40.352001 383.5 38.380001 383.5 31.302 c
383.5 12.042 l
381.00601 12.042 l
381.00601 30.316 l
381.00601 34.259998 380.30801 38.206001 376.422 38.206001 c
374.16 38.206001 371.95599 36.234001 371.37601 32.403999 c
371.26001 31.652 371.26001 30.837999 371.26001 29.968 c
371.26001 12.042 l
368.76401 12.042 l
368.76401 33.448002 l
W*
0 0 602 148 rc
366.534 42.352001 m
385.5 42.352001 l
385.5 10.042 l
366.534 10.042 l
h
f
Q
q
389.25 15.348 m
390.17801 14.71 391.68799 13.896 393.42801 13.896 c
396.328 13.896 398.242 15.87 398.242 18.945999 c
398.242 21.440001 397.48801 23.296 394.47 25.441999 c
391.396 27.648001 388.84399 29.736 388.84399 33.332001 c
388.84399 37.568001 392.09399 40.352001 395.63 40.352001 c
397.72 40.352001 399.228 39.540001 400.15601 38.844002 c
399.05399 36.813999 l
398.01001 37.625999 396.90799 38.147999 395.45801 38.147999 c
392.79001 38.147999 391.33801 36 391.33801 33.854 c
391.33801 31.591999 392.09399 30.316 394.936 28.228001 c
397.604 26.313999 400.79599 23.992001 400.79599 19.642 c
400.79599 14.13 397.14001 11.694 393.31 11.694 c
391.45599 11.694 389.48199 12.332 388.32199 13.318 c
389.25 15.348 l
W*
0 0 602 148 rc
386.32199 42.352001 m
402.79599 42.352001 l
402.79599 9.6940002 l
386.32199 9.6940002 l
h
f
Q
q
405.90201 12.042 m
408.39801 12.042 l
408.39801 39.889999 l
405.90201 39.889999 l
405.90201 12.042 l
h
407.064 45.341999 m
406.01999 45.341999 405.26599 46.153999 405.26599 47.487999 c
405.26599 48.764 406.01999 49.636002 407.12201 49.636002 c
408.39801 49.636002 409.03601 48.764 409.03601 47.487999 c
409.03601 46.153999 408.39801 45.341999 407.12201 45.341999 c
407.064 45.341999 l
407.064 45.341999 l
h
W*
0 0 602 148 rc
403.26599 51.636002 m
411.03601 51.636002 l
411.03601 10.042 l
403.26599 10.042 l
h
f
Q
q
422.09 13.782 m
426.79001 13.782 427.66 21.440001 427.66 25.966 c
427.66 30.49 426.79001 38.147999 421.974 38.147999 c
417.276 38.147999 416.40601 30.49 416.40601 25.966 c
416.40601 21.440001 417.276 13.782 422.034 13.782 c
422.09 13.782 l
h
421.91599 11.576 m
417.97198 11.576 413.854 15.696 413.854 25.966 c
413.854 36.234001 417.97198 40.352001 422.32199 40.352001 c
426.26801 40.352001 430.328 36.234001 430.328 25.966 c
430.328 15.696 426.20999 11.576 421.974 11.576 c
421.91599 11.576 l
421.91599 11.576 l
h
W*
0 0 602 148 rc
411.854 42.352001 m
432.328 42.352001 l
432.328 9.5760002 l
411.854 9.5760002 l
h
f
Q
q
435.78601 33.448002 m
435.78601 36.872002 435.612 37.916 435.55399 39.889999 c
437.81601 39.889999 l
437.93201 36.466 l
438.048 36.466 l
439.09399 38.728001 441.23999 40.352001 444.198 40.352001 c
447.15601 40.352001 450.522 38.380001 450.522 31.302 c
450.522 12.042 l
448.02802 12.042 l
448.02802 30.316 l
448.02802 34.259998 447.32999 38.206001 443.444 38.206001 c
441.18201 38.206001 438.97601 36.234001 438.396 32.403999 c
438.28201 31.652 438.28201 30.837999 438.28201 29.968 c
438.28201 12.042 l
435.78601 12.042 l
435.78601 33.448002 l
W*
0 0 602 148 rc
433.55399 42.352001 m
452.522 42.352001 l
452.522 10.042 l
433.55399 10.042 l
h
f
Q
q
466.54199 12.042 m
466.54199 51.144001 l
469.03601 51.144001 l
476.92401 30.954 l
478.84 26.021999 480.92801 20.742001 482.436 15.988 c
482.552 15.988 l
482.146 23.412001 482.146 27.358 482.146 33.854 c
482.146 51.144001 l
484.526 51.144001 l
484.526 12.042 l
482.03 12.042 l
473.67599 33.273998 l
471.936 37.625999 470.31 41.743999 468.63 47.487999 c
468.51401 47.487999 l
468.918 41.453999 468.918 37.16 468.918 28.518 c
468.918 12.042 l
466.54199 12.042 l
W*
0 0 602 148 rc
464.54199 53.144001 m
486.526 53.144001 l
486.526 10.042 l
464.54199 10.042 l
h
f
Q
q
502.74799 29.040001 m
502.86401 35.886002 500.022 38.147999 497.98999 38.147999 c
494.742 38.147999 493.00201 33.506001 492.71201 29.040001 c
502.74799 29.040001 l
h
492.65399 27.007999 m
492.65399 15.812 496.54199 13.896 499.67401 13.896 c
501.47 13.896 502.922 14.362 503.85001 15 c
504.42999 13.086 l
503.09601 12.156 501.064 11.694 499.20999 11.694 c
493.11801 11.694 490.10199 17.436001 490.10199 25.848 c
490.10199 34.666 493.29199 40.352001 498.396 40.352001 c
503.90799 40.352001 505.41599 33.566002 505.41599 28.634001 c
505.41599 28.112 505.41599 27.587999 505.41599 27.007999 c
492.65399 27.007999 l
492.65399 27.007999 l
h
W*
0 0 602 148 rc
488.10199 42.352001 m
507.41599 42.352001 l
507.41599 9.6940002 l
488.10199 9.6940002 l
h
f
Q
q
513.83398 45.98 m
513.83398 39.889999 l
519.11401 39.889999 l
519.11401 37.740002 l
513.83398 37.740002 l
513.83398 18.771999 l
513.83398 14.884 515.10999 13.84 516.79199 13.84 c
517.48798 13.84 518.06799 13.896 518.474 14.014 c
518.76398 12.1 l
518.12799 11.81 517.42999 11.694 516.27002 11.694 c
514.76202 11.694 513.42798 12.156 512.55603 13.318 c
511.68799 14.48 511.33801 16.16 511.33801 19.700001 c
511.33801 37.740002 l
507.858 37.740002 l
507.858 39.889999 l
511.33801 39.889999 l
511.33801 44.529999 l
513.83398 45.98 l
W*
0 0 602 148 rc
505.858 47.98 m
521.11401 47.98 l
521.11401 9.6940002 l
505.858 9.6940002 l
h
f
Q
q
523.60797 39.889999 m
527.03003 25.268 l
527.72601 22.309999 528.47998 19.120001 528.88599 16.101999 c
529.12 16.101999 l
529.58197 19.120001 530.336 22.486 531.034 25.153999 c
534.68799 39.889999 l
536.65997 39.889999 l
540.14001 25.618 l
540.89398 22.542 541.59198 19.468 542.172 16.101999 c
542.40399 16.101999 l
542.81 19.236 543.50598 22.077999 544.26001 25.386 c
547.51001 39.889999 l
550.06201 39.889999 l
543.15802 12.042 l
541.24402 12.042 l
537.29797 27.938 l
536.54602 30.780001 536.19598 32.925999 535.67401 36.118 c
535.55798 36.118 l
535.03601 32.751999 534.51398 30.374001 533.87598 27.705999 c
529.98798 12.042 l
527.90002 12.042 l
521.11401 39.889999 l
523.60797 39.889999 l
W*
0 0 602 148 rc
519.11401 41.889999 m
552.06201 41.889999 l
552.06201 10.042 l
519.11401 10.042 l
h
f
Q
q
560.85602 13.782 m
565.55402 13.782 566.42603 21.440001 566.42603 25.966 c
566.42603 30.49 565.55402 38.147999 560.73999 38.147999 c
556.04199 38.147999 555.172 30.49 555.172 25.966 c
555.172 21.440001 556.04199 13.782 560.79797 13.782 c
560.85602 13.782 l
h
560.68201 11.576 m
556.73798 11.576 552.62 15.696 552.62 25.966 c
552.62 36.234001 556.73798 40.352001 561.08801 40.352001 c
565.034 40.352001 569.09399 36.234001 569.09399 25.966 c
569.09399 15.696 564.974 11.576 560.73999 11.576 c
560.68201 11.576 l
560.68201 11.576 l
h
W*
0 0 602 148 rc
550.62 42.352001 m
571.09399 42.352001 l
571.09399 9.5760002 l
550.62 9.5760002 l
h
f
Q
q
574.49402 33.448002 m
574.49402 35.537998 574.32001 38.147999 574.26202 39.889999 c
576.64001 39.889999 l
576.75598 35.363998 l
576.87402 35.363998 l
577.56799 37.799999 580.00598 40.352001 582.90601 40.352001 c
583.08002 40.352001 583.25403 40.352001 583.42798 40.352001 c
583.42798 37.625999 l
583.31201 37.625999 583.138 37.625999 582.96399 37.625999 c
579.36798 37.625999 577.28003 34.085999 577.04602 30.664 c
576.98798 29.851999 576.98798 29.098 576.98798 28.285999 c
576.98798 12.042 l
574.49402 12.042 l
574.49402 33.448002 l
W*
0 0 602 148 rc
572.26202 42.352001 m
585.42798 42.352001 l
585.42798 10.042 l
572.26202 10.042 l
h
f
Q
q
589.90802 26.488001 m
590.02399 26.488001 l
590.54602 27.299999 591.06799 28.285999 591.59003 29.153999 c
598.32001 39.889999 l
601.04602 39.889999 l
593.33002 28.167999 l
601.91803 12.042 l
599.07397 12.042 l
591.70801 26.254 l
589.90802 23.528 l
589.90802 12.042 l
587.414 12.042 l
587.414 52.188 l
589.90802 52.188 l
589.90802 26.488001 l
W*
0 0 602 148 rc
585.414 54.188 m
603.91803 54.188 l
603.91803 10.042 l
585.414 10.042 l
h
f
ep
end
%%Trailer
%%EOF
